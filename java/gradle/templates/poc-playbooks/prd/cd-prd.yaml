stages:
- stage: DeployPrd
  displayName: Deploy Production
  #dependsOn: TagAndPush
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
  jobs:
  - deployment: Approval
    displayName: Approval
    environment: poc-playbooks
  - job: DeploytoOpenShift
    dependsOn: Approval
    displayName: Deploy to OpenShift
    pool:
      vmImage: '$(vmImageAZ)'
    steps:
    - checkout: poc-playbooks
    - task: gitversion/setup@0
      displayName: Install GitTools
      inputs:
        versionSpec: '5.6.8'
    - task: gitversion/execute@0
      displayName: Use GitVersion
    - task: redhat.openshift-vsts.oc-setup-task.oc-setup@2
      displayName: OpenShift Connect
      inputs:
        openshiftService: 'sc-sa-az-devops'
    - script: |
        echo $(buildIdHelmArtifact)
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'specific'
        project: '$(projectId)'
        pipeline: '$(projectId)-hlg'
        buildVersionToDownload: 'specific'
        buildId: '$(buildIdHelmArtifact)'
        downloadType: 'single'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: HelmDeploy@0
      inputs:
        connectionType: 'None'
        namespace: '$(projectId)-prd'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: '$(Build.ArtifactStagingDirectory)/helm'
        releaseName: '$(projectId)-prd'
        overrideValues: |
          'image.repository=$(containerRegistry)/$(projectId)_prd'
          'image.tag=$(GitVersion.MajorMinorPatch)'
        arguments: '--timeout 300s --history-max 10'
      displayName: Helm Deploy
  - job: ThreeScale
    displayName: 3Scale
    dependsOn: DeploytoOpenShift
    pool:
      vmImage: '$(vmImageAZ)'
    steps:
    - task: gitversion/setup@0
      displayName: Install GitTools
      inputs:
        versionSpec: '5.6.8'
    - task: gitversion/execute@0
      displayName: Use GitVersion 
    - task: redhat.openshift-vsts.oc-setup-task.oc-setup@2
      displayName: OpenShift Connect
      inputs:
        openshiftService: 'sc-sa-az-devops'
    - script: |
        git clone https://$(gitUsername):$(gitPassword)@github.com/ArquiteturaCorporativaLight/$(projectId).git
      displayName: Git Clone Repo
    - script: |

        # Task Import OpenAPI
        sed -i "s|\${3SCALE_REMOTE_INSTANCE}|$(3scaleRemoteInstance)|g"   $(projectId)/toolbox/$(jobImportApi)
        sed -i "s|\${OPEN_API_DIR}|$(openApiDir)|g" $_
        sed -i "s|\${OIDC_ISSUER}|$(oidcIssuer)|g" $_
        sed -i "s|\${ISSUER_TYPE}|$(issuerType)|g"  $_
        sed -i "s|\${SERVICE_NAME}|$(projectId)-prd|g" $_
        # Task Create Application Plan
        sed -i "s|\${PLAN_NAME}|$(planName)|g"  $(projectId)/toolbox/$(jobCreateApplicationPlan)
        sed -i "s|\${3SCALE_REMOTE_INSTANCE}|$(3scaleRemoteInstance)|g" $_
        sed -i "s|\${SERVICE_NAME}|$(projectId)-prd|g" $_
        sed -i "s|\${PLAN_DESCRIPTION}|$(planDescription)|g" $_
        # Task Create Application
        sed -i "s|\${APPLICATION_NAME}|$(applicationName)|g"  $(projectId)/toolbox/$(jobCreateApplication)
        sed -i "s|\${3SCALE_REMOTE_INSTANCE}|$(3scaleRemoteInstance)|g" $_
        sed -i "s|\${USER_ACCOUNT}|$(userAccount)|g" $_
        sed -i "s|\${DESCRIPTION_NAME}|$(descriptionName)|g" $_
        sed -i "s|\${DESCRIPTION}|$(description)|g" $_
        sed -i "s|\${SERVICE_NAME}|$(projectId)-prd|g" $_
        sed -i "s|\${PLAN_NAME}|$(planName)|g"  $_
        # Task Promote API
        sed -i "s|\${3SCALE_REMOTE_INSTANCE}|$(3scaleRemoteInstance)|g"  $(projectId)/toolbox/$(jobPromoteApi)
        sed -i "s|\${SERVICE_NAME}|$(projectId)-prd|g" $_
      failOnStderr: true
      displayName: Change YAML Variable
    - script: |
        oc project 3scale-toolbox
      failOnStderr: true
      displayName: Use Project
    - script: |
        oc delete configmap openapi --ignore-not-found
        sleep 5
        oc create configmap openapi --from-file="$(projectId)/contractFirst/openApi.json"
      failOnStderr: true
      displayName: Fetch OpenAPI
    - script: |
        oc create -f  $(projectId)/toolbox/$(jobImportApi)
        sleep 10
        oc logs -f job/3scale-import-api
      failOnStderr: true
      displayName: Import OpenAPI
    - script: |
        oc create -f  $(projectId)/toolbox/$(jobCreateApplicationPlan)
        sleep 15
        oc logs -f job/3scale-aplication-plan
      failOnStderr: true
      displayName: Create Application Plan
    - script: |
        oc create -f  $(projectId)/toolbox/$(jobCreateApplication)
        sleep 5
        oc logs -f job/3scale-application
      failOnStderr: true
      displayName: Create Application
    - script: |
        oc create -f  $(projectId)/toolbox/$(jobPromoteApi)
        sleep 5
        oc logs -f job/3scale-promove-production
      failOnStderr: true
      displayName: Promote API
    - script: |
        oc delete job 3scale-import-api --ignore-not-found
        oc delete job 3scale-aplication-plan --ignore-not-found
        oc delete job 3scale-application --ignore-not-found
        oc delete job 3scale-promove-production --ignore-not-found
      failOnStderr: true
      displayName: Delete jobs