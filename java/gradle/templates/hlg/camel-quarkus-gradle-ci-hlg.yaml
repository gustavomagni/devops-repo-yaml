stages:

- stage: UnitTest
  displayName: Unit Test
  jobs:
  - job: UnitTest
    displayName: Unit Test
    pool:
      vmImage: '$(vmImageAZ)'
    steps:
    - task: gitversion/setup@0
      displayName: Install GitTools
      inputs:
        versionSpec: '5.6.8'
    - task: gitversion/execute@0
      displayName: Use GitVersion
    - bash: |
        echo "##vso[task.setvariable variable=HOME_DIRECTORY;]$HOME"
      displayName: Set Variable
    - task: Cache@2
      displayName: Gradle Caches
      inputs:
        key: 'gradle | "$(Agent.OS)"'
        path: $(GradleCache)
    - script: |
        ./gradlew --build-cache test -PartifactId=$(projectId) -Pversion=$(tag1)  
        ./gradlew --stop    
      displayName: Build Test

- stage: CheckOutHelmRepo
  displayName: Check Out Helm Repo
  dependsOn: UnitTest
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - job: helm
    displayName: helm
    pool:
      vmImage: '$(vmImageAZ)'
    steps:
    - script: dir $(Build.SourcesDirectory)
    - task: HelmInstaller@1
      displayName: Install Helm Latest
      inputs:
        helmVersionToInstall: 'latest'
    - task: Bash@3
      displayName: Helm lint
      inputs:
        targetType: 'inline'
        script: |
          helm lint chart
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        Contents: |
          chart/**
        TargetFolder: '$(Build.ArtifactStagingDirectory)/'
        OverWrite: true
      displayName: Copy Files Helm
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/chart'
        ArtifactName: 'helm'
        publishLocation: 'Container'
      displayName: Publish and Build Artifacts Helm

- stage: BuildandPublish
  displayName: Build and Publish
  dependsOn: UnitTest
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - job: BuildandPublish
    displayName: Build and Publish
    pool:
      vmImage: '$(vmImageAZ)'
    steps:
    - task: gitversion/setup@0
      displayName: Install GitTools
      inputs:
        versionSpec: '5.6.8'
    - task: gitversion/execute@0
      displayName: Use GitVersion
    - task: Cache@2
      inputs:
        key: 'docker | cache'
        path: /home/vsts/.docker
        cacheHitVar: DOCKER_CACHE_HIT
      displayName: Cache Docker images
    - script: |
        docker load -i /home/vsts/.docker/cache.tar
      displayName: Restore Docker image
      condition: and(not(canceled()), eq(variables.DOCKER_CACHE_HIT, 'true'))
    - bash: |
        echo "##vso[task.setvariable variable=HOME_DIRECTORY;]$HOME"
      displayName: Set Variable
    - task: Cache@2
      displayName: Gradle Caches
      inputs:
        key: 'gradle | "$(Agent.OS)"'
        path: $(GradleCache)
    - script: |
        ./gradlew --build-cache build -x test -PartifactId=$(projectId) -Pversion=$(tag1) -Dquarkus.container-image.build=true -Dquarkus.container-image.group=$(containerRegistry) -Dquarkus.container-image.name=$(imageRepository) -Dquarkus.package.type=native -Dquarkus.jib.base-native-image=$(dockerBaseImage)
        ./gradlew --stop    
      displayName: Build
    - task: Cache@2
      inputs:
        key: 'docker | cache'
        path: /home/vsts/.docker
        cacheHitVar: DOCKER_CACHE_HIT
      displayName: Cache Docker images
    - script: |
        mkdir -p /home/vsts/.docker
        docker save -o /home/vsts/.docker/cache.tar $(dockerBaseImage)
      displayName: Save Docker image
      condition: and(not(canceled()), or(failed(), ne(variables.DOCKER_CACHE_HIT, 'true')))
    - script: |
        ./gradlew --build-cache -PartifactId=$(projectId) -Pversion=$(tag1) -PurlArtifactsMaven=$(urlArtifactsMaven) -PfeedArtifactsMaven=$(feedArtifactsMaven) -PuserPublish=$(organizationName) -PkeyPublish=$(accessTokenMaven) -Dquarkus.package.type=native publish
      displayName: Artifacts
    - script: |
        sudo docker tag '$(containerRegistry)/$(imageRepository):$(tag1)' '$(containerRegistry)/$(imageRepository)_hlg:$(tag1)-hlg'
        sudo docker tag '$(containerRegistry)/$(imageRepository):$(tag1)' '$(containerRegistry)/$(imageRepository)_hlg:latest'
      displayName: Tagging
    - task: Docker@2
      displayName: Push ACR
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)_hlg'
        command: 'push'
        tags: '$(tag1)-hlg'
    - task: Docker@2
      displayName: Push ACR latest
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)_hlg'
        command: 'push'
        tags: 'latest'