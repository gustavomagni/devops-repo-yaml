stages:
- stage: DeployHomolog
  displayName: Deploy Homolog
  #dependsOn: BuildandPublish
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Approval
    displayName: Approval
    environment: '$(projectId)'
  - job: CheckOutHelmRepo
    dependsOn: Approval
    displayName: Helm Check
    pool:
      vmImage: '$(vmImageAZ)'
    steps:
    - checkout: devops-repo-yaml
    - task: Bash@3
      displayName: Helm lint
      inputs:
        targetType: 'inline'
        script: |
          helm lint java/gradle/templates/$(projectId)/helm
        failOnStderr: true
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        Contents: |
          java/gradle/templates/$(projectId)/helm/**
        TargetFolder: '$(Build.ArtifactStagingDirectory)/'
        OverWrite: true
      displayName: Copy Files
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/java/gradle/templates/$(projectId)/helm'
        ArtifactName: 'helm'
        publishLocation: 'Container'
      displayName: Publish and Build Artifacts
  - job: DeploytoOpenShift
    dependsOn: CheckOutHelmRepo
    displayName: Deploy to OpenShift
    pool:
      vmImage: '$(vmImageAZ)'
    steps:
    - checkout: poc-playbooks-fase3
    - task: gitversion/setup@0
      displayName: Install GitTools
      inputs:
        versionSpec: '5.6.8'
    - task: gitversion/execute@0
      displayName: Use GitVersion
    - task: redhat.openshift-vsts.oc-setup-task.oc-setup@2
      displayName: OpenShift Connect
      inputs:
        openshiftService: 'sc-sa-az-devops'
      timeoutInMinutes: 2
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        buildVersionToDownload: 'latest'
        downloadType: 'single'
        artifactName: 'helm'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
      displayName: Download Build Artifacts
    - task: HelmDeploy@0
      inputs:
        connectionType: 'None'
        namespace: '$(projectId)-hlg'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: '$(Build.ArtifactStagingDirectory)/helm'
        releaseName: '$(projectId)-hlg'
        overrideValues: |
          image.repository=$(containerRegistry)/$(projectId)_hlg
          image.tag=$(GitVersion.MajorMinorPatch)-hlg
        arguments: '--timeout 300s --history-max 10'
      displayName: Helm Deploy
  - job: ThreeScale
    displayName: 3Scale
    dependsOn: DeploytoOpenShift
    pool:
      vmImage: '$(vmImageAZ)'
    steps:
    - task: gitversion/setup@0
      displayName: Install GitTools
      inputs:
        versionSpec: '5.6.8'
    - task: gitversion/execute@0
      displayName: Use GitVersion 
    - task: redhat.openshift-vsts.oc-setup-task.oc-setup@2
      displayName: OpenShift Connect
      inputs:
        openshiftService: 'sc-sa-az-devops'
    - script: |
        oc project 3scale-toolbox
      failOnStderr: true
      displayName: Use Project
    - script: |
        oc delete job 3scale-import-api --ignore-not-found
        oc delete job 3scale-aplication-plan --ignore-not-found
        oc delete job 3scale-application --ignore-not-found
        oc delete job 3scale-promove-production --ignore-not-found
        oc delete configmap openapi --ignore-not-found
      failOnStderr: true
      displayName: Delete objects
    - script: |
        git clone https://$(tokenGitHub)@github.com/ArquiteturaCorporativaLight/$(projectId).git
      displayName: Git Clone Repo
    - script: |

        # Task Import OpenAPI
        sed -i "s|\${3SCALE_REMOTE_INSTANCE}|$(3scaleRemoteInstance)|g"   $(projectId)/toolbox/$(jobImportApi)
        sed -i "s|\${OPEN_API_DIR}|$(openApiDir)|g" $_
        sed -i "s|\${OIDC_ISSUER}|$(oidcIssuer)|g" $_
        sed -i "s|\${ISSUER_TYPE}|$(issuerType)|g"  $_
        sed -i "s|\${SERVICE_NAME}|$(projectId)-hlg|g" $_
        sed -i "s|\${ENDPOINT_API}|$(endpointAPI)|g" $_
        # Task Create Application Plan
        sed -i "s|\${PLAN_NAME}|$(planName)|g"  $(projectId)/toolbox/$(jobCreateApplicationPlan)
        sed -i "s|\${3SCALE_REMOTE_INSTANCE}|$(3scaleRemoteInstance)|g" $_
        sed -i "s|\${SERVICE_NAME}|$(projectId)-hlg|g" $_
        sed -i "s|\${PLAN_DESCRIPTION}|$(planDescription)|g" $_
        # Task Create Application
        sed -i "s|\${APPLICATION_NAME}|$(applicationName)|g"  $(projectId)/toolbox/$(jobCreateApplication)
        sed -i "s|\${3SCALE_REMOTE_INSTANCE}|$(3scaleRemoteInstance)|g" $_
        sed -i "s|\${USER_ACCOUNT}|$(userAccount)|g" $_
        sed -i "s|\${DESCRIPTION_NAME}|$(descriptionName)|g" $_
        sed -i "s|\${DESCRIPTION}|$(description)|g" $_
        sed -i "s|\${SERVICE_NAME}|$(projectId)-hlg|g" $_
        sed -i "s|\${PLAN_NAME}|$(planName)|g"  $_
        # Task Promote API
        sed -i "s|\${3SCALE_REMOTE_INSTANCE}|$(3scaleRemoteInstance)|g"  $(projectId)/toolbox/$(jobPromoteApi)
        sed -i "s|\${SERVICE_NAME}|$(projectId)-hlg|g" $_
      failOnStderr: true
      displayName: Change YAML Variable
    - task: oc-cmd@2
      inputs:
        connectionType: 'OpenShift Connection Service'
        openshiftService: 'sc-sa-az-devops'
        cmd: create configmap openapi  --from-file="/$(System.DefaultWorkingDirectory)/$(projectId)/contractFirst/openApi.json"
      displayName: Fetch OpenAPI
    - task: oc-cmd@2
      inputs:
        connectionType: 'OpenShift Connection Service'
        openshiftService: 'sc-sa-az-devops'
        cmd: 'create -f  /$(System.DefaultWorkingDirectory)/$(projectId)/toolbox/$(jobImportApi)'
      displayName: Import OpenAPI
    - task: oc-cmd@2
      inputs:
        connectionType: 'OpenShift Connection Service'
        openshiftService: 'sc-sa-az-devops'
        cmd: 'create -f  /$(System.DefaultWorkingDirectory)/$(projectId)/toolbox/$(jobCreateApplicationPlan)'
      displayName: Create Application Plan
    - task: oc-cmd@2
      inputs:
        connectionType: 'OpenShift Connection Service'
        openshiftService: 'sc-sa-az-devops'
        cmd: 'create -f  /$(System.DefaultWorkingDirectory)/$(projectId)/toolbox/$(jobCreateApplication)'
      displayName: Create Application
    - task: oc-cmd@2
      inputs:
        connectionType: 'OpenShift Connection Service'
        openshiftService: 'sc-sa-az-devops'
        cmd: 'create -f  /$(System.DefaultWorkingDirectory)/$(projectId)/toolbox/$(jobPromoteApi)'
      displayName: Promote API